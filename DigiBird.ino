/* 
  DIGIBIRD
  VGA game
  by Joshua Kranabetter 
  November 28 2018
  
  Uses Modified VGAX Library by Sandro Maffiodo: https://github.com/smaffer/vgax
  
  Buzzer uses pin A1 instead of A0
  Button connected to pin A1 (include hardware debounce for best gameplay)

  Version Updates:
  Version 2 - New overhauled logic for speed/readability/ease of adding features
  Version 3 - Added Gameplay modifiers to make things interesting + into/retry animations
  Version 4 - Follower birds now correspond to extra lives - one is removed per collision - if you have no followers and collide you die 
             - can be easily modified to work with a buzzer ( since my i didnt include it in my project ive used the analog output to 
               introduce a static effect at certain point in the game
*/

#include <VGAX.h>
#include <VGAXUtils.h>
#include <EEPROM.h>
VGAXUtils vgaU;
VGAX vga;

/* ----------------------------------------------------------------- DECLARE DATA SCTRUCTURES -----------------------------------------------------------------*/
/* define tiny font character set */
#define FNT_NANOFONT_HEIGHT 6
#define FNT_NANOFONT_SYMBOLS_COUNT 95
//data size=570 bytes
const unsigned char fnt_nanofont_data[FNT_NANOFONT_SYMBOLS_COUNT][1 + FNT_NANOFONT_HEIGHT] PROGMEM = {
  { 1, 128, 128, 128, 0, 128, 0, }, //glyph '!' code=0
  { 3, 160, 160, 0, 0, 0, 0, }, //glyph '"' code=1
  { 5, 80, 248, 80, 248, 80, 0, },  //glyph '#' code=2
  { 5, 120, 160, 112, 40, 240, 0, },  //glyph '$' code=3
  { 5, 136, 16, 32, 64, 136, 0, },  //glyph '%' code=4
  { 5, 96, 144, 104, 144, 104, 0, },  //glyph '&' code=5
  { 2, 128, 64, 0, 0, 0, 0, },  //glyph ''' code=6
  { 2, 64, 128, 128, 128, 64, 0, }, //glyph '(' code=7
  { 2, 128, 64, 64, 64, 128, 0, },  //glyph ')' code=8
  { 3, 0, 160, 64, 160, 0, 0, },  //glyph '*' code=9
  { 3, 0, 64, 224, 64, 0, 0, }, //glyph '+' code=10
  { 2, 0, 0, 0, 0, 128, 64, },  //glyph ',' code=11
  { 3, 0, 0, 224, 0, 0, 0, }, //glyph '-' code=12
  { 1, 0, 0, 0, 0, 128, 0, }, //glyph '.' code=13
  { 5, 8, 16, 32, 64, 128, 0, },  //glyph '/' code=14
  { 4, 96, 144, 144, 144, 96, 0, }, //glyph '0' code=15
  { 3, 64, 192, 64, 64, 224, 0, },  //glyph '1' code=16
  { 4, 224, 16, 96, 128, 240, 0, }, //glyph '2' code=17
  { 4, 224, 16, 96, 16, 224, 0, },  //glyph '3' code=18
  { 4, 144, 144, 240, 16, 16, 0, }, //glyph '4' code=19
  { 4, 240, 128, 224, 16, 224, 0, },  //glyph '5' code=20
  { 4, 96, 128, 224, 144, 96, 0, }, //glyph '6' code=21
  { 4, 240, 16, 32, 64, 64, 0, }, //glyph '7' code=22
  { 4, 96, 144, 96, 144, 96, 0, },  //glyph '8' code=23
  { 4, 96, 144, 112, 16, 96, 0, },  //glyph '9' code=24
  { 1, 0, 128, 0, 128, 0, 0, }, //glyph ':' code=25
  { 2, 0, 128, 0, 0, 128, 64, },  //glyph ';' code=26
  { 3, 32, 64, 128, 64, 32, 0, }, //glyph '<' code=27
  { 3, 0, 224, 0, 224, 0, 0, }, //glyph '=' code=28
  { 3, 128, 64, 32, 64, 128, 0, },  //glyph '>' code=29
  { 4, 224, 16, 96, 0, 64, 0, },  //glyph '?' code=30
  { 4, 96, 144, 176, 128, 112, 0, },  //glyph '@' code=31
  { 4, 96, 144, 240, 144, 144, 0, },  //glyph 'A' code=32
  { 4, 224, 144, 224, 144, 224, 0, }, //glyph 'B' code=33
  { 4, 112, 128, 128, 128, 112, 0, }, //glyph 'C' code=34
  { 4, 224, 144, 144, 144, 224, 0, }, //glyph 'D' code=35
  { 4, 240, 128, 224, 128, 240, 0, }, //glyph 'E' code=36
  { 4, 240, 128, 224, 128, 128, 0, }, //glyph 'F' code=37
  { 4, 112, 128, 176, 144, 112, 0, }, //glyph 'G' code=38
  { 4, 144, 144, 240, 144, 144, 0, }, //glyph 'H' code=39
  { 3, 224, 64, 64, 64, 224, 0, },  //glyph 'I' code=40
  { 4, 240, 16, 16, 144, 96, 0, },  //glyph 'J' code=41
  { 4, 144, 160, 192, 160, 144, 0, }, //glyph 'K' code=42
  { 4, 128, 128, 128, 128, 240, 0, }, //glyph 'L' code=43
  { 5, 136, 216, 168, 136, 136, 0, }, //glyph 'M' code=44
  { 4, 144, 208, 176, 144, 144, 0, }, //glyph 'N' code=45
  { 4, 96, 144, 144, 144, 96, 0, }, //glyph 'O' code=46
  { 4, 224, 144, 224, 128, 128, 0, }, //glyph 'P' code=47
  { 4, 96, 144, 144, 144, 96, 16, },  //glyph 'Q' code=48
  { 4, 224, 144, 224, 160, 144, 0, }, //glyph 'R' code=49
  { 4, 112, 128, 96, 16, 224, 0, }, //glyph 'S' code=50
  { 3, 224, 64, 64, 64, 64, 0, }, //glyph 'T' code=51
  { 4, 144, 144, 144, 144, 96, 0, },  //glyph 'U' code=52
  { 3, 160, 160, 160, 160, 64, 0, },  //glyph 'V' code=53
  { 5, 136, 168, 168, 168, 80, 0, },  //glyph 'W' code=54
  { 4, 144, 144, 96, 144, 144, 0, },  //glyph 'X' code=55
  { 3, 160, 160, 64, 64, 64, 0, },  //glyph 'Y' code=56
  { 4, 240, 16, 96, 128, 240, 0, }, //glyph 'Z' code=57
  { 2, 192, 128, 128, 128, 192, 0, }, //glyph '[' code=58
  { 5, 128, 64, 32, 16, 8, 0, },  //glyph '\' code=59
  { 2, 192, 64, 64, 64, 192, 0, },  //glyph ']' code=60
  { 5, 32, 80, 136, 0, 0, 0, }, //glyph '^' code=61
  { 4, 0, 0, 0, 0, 240, 0, }, //glyph '_' code=62
  { 2, 128, 64, 0, 0, 0, 0, },  //glyph '`' code=63
  { 3, 0, 224, 32, 224, 224, 0, },  //glyph 'a' code=64
  { 3, 128, 224, 160, 160, 224, 0, }, //glyph 'b' code=65
  { 3, 0, 224, 128, 128, 224, 0, }, //glyph 'c' code=66
  { 3, 32, 224, 160, 160, 224, 0, },  //glyph 'd' code=67
  { 3, 0, 224, 224, 128, 224, 0, }, //glyph 'e' code=68
  { 2, 64, 128, 192, 128, 128, 0, },  //glyph 'f' code=69
  { 3, 0, 224, 160, 224, 32, 224, },  //glyph 'g' code=70
  { 3, 128, 224, 160, 160, 160, 0, }, //glyph 'h' code=71
  { 1, 128, 0, 128, 128, 128, 0, }, //glyph 'i' code=72
  { 2, 0, 192, 64, 64, 64, 128, },  //glyph 'j' code=73
  { 3, 128, 160, 192, 160, 160, 0, }, //glyph 'k' code=74
  { 1, 128, 128, 128, 128, 128, 0, }, //glyph 'l' code=75
  { 5, 0, 248, 168, 168, 168, 0, }, //glyph 'm' code=76
  { 3, 0, 224, 160, 160, 160, 0, }, //glyph 'n' code=77
  { 3, 0, 224, 160, 160, 224, 0, }, //glyph 'o' code=78
  { 3, 0, 224, 160, 160, 224, 128, }, //glyph 'p' code=79
  { 3, 0, 224, 160, 160, 224, 32, },  //glyph 'q' code=80
  { 3, 0, 224, 128, 128, 128, 0, }, //glyph 'r' code=81
  { 2, 0, 192, 128, 64, 192, 0, },  //glyph 's' code=82
  { 3, 64, 224, 64, 64, 64, 0, }, //glyph 't' code=83
  { 3, 0, 160, 160, 160, 224, 0, }, //glyph 'u' code=84
  { 3, 0, 160, 160, 160, 64, 0, },  //glyph 'v' code=85
  { 5, 0, 168, 168, 168, 80, 0, },  //glyph 'w' code=86
  { 3, 0, 160, 64, 160, 160, 0, },  //glyph 'x' code=87
  { 3, 0, 160, 160, 224, 32, 224, },  //glyph 'y' code=88
  { 2, 0, 192, 64, 128, 192, 0, },  //glyph 'z' code=89
  { 3, 96, 64, 192, 64, 96, 0, }, //glyph '{' code=90
  { 1, 128, 128, 128, 128, 128, 0, }, //glyph '|' code=91
  { 3, 192, 64, 96, 64, 192, 0, },  //glyph '}' code=92
  { 3, 96, 192, 0, 0, 0, 0, },  //glyph '~' code=93
  { 4, 48, 64, 224, 64, 240, 0, },  //glyph 'Â£' code=94
};

/* start screen 1 of 2 */
#define IMG_STARTSCRNA_WIDTH 120
#define IMG_STARTSCRNA_BWIDTH 30
#define IMG_STARTSCRNA_HEIGHT 60
//data size=1800 bytes
const unsigned char img_StartScrnA_data[IMG_STARTSCRNA_HEIGHT][IMG_STARTSCRNA_BWIDTH] PROGMEM={
{ 170, 170, 170, 170, 170, 170, 170, 170, 191, 250, 170, 170, 255, 170, 170, 255, 255, 255, 255, 175, 255, 255, 250, 170, 170, 170, 170, 170, 170, 170, }, { 128,   0,   0,   0,   0,   0,   0,   0, 255, 255, 192,  15, 255,   0,   3, 255, 255, 255, 255,  63, 255, 255, 240,   0,   0,   0,   0,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0,   0,   0, 255, 255, 240,  63, 255, 192,  15, 255, 255, 255, 255, 255, 255, 255, 252,   0,   0,   0,   0,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0,   0,   3, 255, 255, 252, 255, 255, 192,  63, 255, 255, 255, 255, 255, 255, 255, 255,   0,   0,   0,   0,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0,   0,   3, 255, 255, 255, 255, 255, 195, 255, 255, 255, 255, 255, 255, 255, 255, 255,   0,   0,   0,   0,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0,   0,  15, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 192,   0,   0,   0,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0,   0,  15, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 192,   0,   0,   0,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0,   0,  63, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 192,   0,   0,   0,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0,   0,  63, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 192,   0,   0,   0,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0,   0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 192,   0,   0,   0,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0,   0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 192,   0,   0,   0,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0,   0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,   0,   0,   0,   0,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0,   0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,   0,   0,   0,   0,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0,   0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 240,   0,   0,   0,   0,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0,   0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 192,   0,   0,   0,   0,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0,   0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,   0,   0,   0,   0,   0,   0,   0,   2, }, { 128,   0,   0,   0,   0,  48,   0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 243, 255, 255, 255, 252,   0,   0,   0,   0,   0,   0,   0,   2, }, { 128,   0,   0,   0,   3, 240, 252,  63, 255, 255, 255, 255, 255, 255, 255, 255, 255,   0, 255, 255, 255, 192,   0,   0,   0,   0,   0,   0,   0,   2, }, { 128,   0,   0,   0,  15, 195, 252,  15, 255, 252,   0, 255, 255, 255, 255, 255, 192,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   2, }, { 128,   0,   0,  60,  15, 192,   0,   0, 252,   0,   0,   3, 255, 255, 255,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   2, }, { 128,   0,   0, 255, 192,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   2, }, { 128,   0,   3, 204, 240,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   2, }, { 128,   0,  15, 204, 252,   0,   0,   0,   0,  42,  42,  40, 162, 128, 168, 168,  10,  42,  42,  42,  42,   0,   0,   0,   0,   0,   0,   0,   0,   2, }, { 128,   0,  15, 251, 252,   0,   0,   0,   0,  34,  34,  32, 130,   0,  32, 136,   8,   8,  34,  34,   8,   0,  15, 255, 255, 252,   0,   0,   0,   2, }, { 128,   0,  63, 255, 255,   0,   0,   0,   0,  42,  42,  40, 162, 128,  32, 136,  10,   8,  42,  42,   8,   0, 255, 255, 255, 255,   0,   0,   0,   2, }, { 128,   0,  63,   0,  63,   0,   0,   0,   0,  32,  40,  32,  32, 128,  32, 136,   2,   8,  34,  40,   8,   0, 255, 255, 255, 255, 192,   0,   0,   2, }, { 128,   0, 240,   0,   3, 192,   0,   0,   0,  32,  34,  40, 162, 128,  32, 168,  10,   8,  34,  34,   8,   3, 255, 255, 255, 255, 192,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15, 255, 255, 255, 255, 240,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15, 255, 255, 255, 255, 240,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  63, 255, 255, 255, 255, 240,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  63, 255, 255, 255, 255, 255, 255, 252,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 255, 255, 255, 255, 255, 255, 255, 252,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   3, 255, 255, 255, 255, 255, 255, 255, 255,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0, 255, 255, 255, 192,   0,   0,   0,   0,   0,   0,   0,   0,  15, 255, 255, 255, 255, 255, 255, 255, 255, 192,   0,   2, }, { 128,   0,   0,   0,   0,  15, 255, 255, 255, 240,   0,   0,   0,   0,   0,   0,   0,   0,  15, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 194, }, { 128,   0,   0,   0,   0,  15, 255, 255, 255, 252,   0,   0,   0,   0,   0,   0,   0,   0,  15, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 242, }, { 128,   0,   0,   0,   0,  63, 255, 255, 255, 252,   0,   0,   0,   0,   0,   0,   0,   0,  15, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, }, { 128,   0,   0,   0,   0, 255, 255, 255, 255, 255,   0,   0,   0,   0,   0,   0,   0,   0,  15, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, }, { 128,   0,   0,   0,   0, 255, 255, 255, 255, 255,   0,   0,   0,   0,   0,   0,   0,   0,  63, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, }, { 128,   0,   0,   0,   3, 255, 255, 255, 255, 255,   0,   0,   0,   0,   0,   0,   0,   0,  63, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, }, { 128,   0,   3, 255, 255, 255, 255, 255, 255, 255, 192,   0,   0,   0,   0,   0,   0,   0,  63, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, }, { 128,   0,  15, 255, 255, 255, 255, 255, 255, 255, 192,   0,   0,   0,   0,   0,   0,   0,  15, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 242, }, { 128,   0,  63, 255, 255, 255, 255, 255, 255, 255, 240,   0,   0,   0,   0,   0,   0,   0,   3, 255, 255, 255, 255, 255, 240,   0, 255, 255, 255,   2, }, { 128,   0, 255, 255, 255, 255, 255, 255, 255, 255, 252,   0,   0,   0,   0,   0,   0,   3, 192,  15, 255,   3, 255, 255, 192,   0,   0, 255, 252,   2, }, { 128,   0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 252,   0,   0,   0,   0,   0,   0,   0,   0,   0,  63, 255,   0,   0,   0,   0,   0,   2, }, { 128,   0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,   0,   0,   0,   0,   0, 207,   0,   0,   0,   3, 252,   0,   0,   0,   0,   0,   2, }, { 128,   0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 192,   0,   0,   0,   0, 192,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   2, }, { 128,   0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 192,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   2, }, { 149,  87, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 213,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  86, }, { 149,  87, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 213,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  86, }, { 149,  87, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 213,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  86, }, { 149,  85, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  86, }, { 149,  85, 127, 255, 255, 255, 255, 255,  85,  95, 255, 255, 245,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  86, }, { 149, 125,  85, 255, 245, 127, 255, 253,  85,  85,  95, 255, 213,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  86, }, { 149,  85,  85,  85,  85,  87, 255, 245,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  86, }, { 170, 174, 250, 170, 170, 170, 191, 234, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, }, };

/* start screen 2 of 2 */
#define IMG_STARTSCRNB_WIDTH 120
#define IMG_STARTSCRNB_BWIDTH 30
#define IMG_STARTSCRNB_HEIGHT 60
//data size=1800 bytes
const unsigned char img_StartScrnB_data[IMG_STARTSCRNB_HEIGHT][IMG_STARTSCRNB_BWIDTH] PROGMEM={
{ 170, 170, 170, 170, 170, 170, 170, 170, 191, 250, 170, 170, 255, 170, 170, 255, 255, 255, 255, 175, 255, 255, 250, 170, 170, 170, 170, 170, 170, 170, }, { 128,   0,   0,   0,   0,   0,   0,   0, 255, 255, 192,  15, 255,   0,   3, 255, 255, 255, 255,  63, 255, 255, 240,   0,   0,   0,   0,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0,   0,   0, 255, 255, 240,  63, 255, 192,  15, 255, 255, 255, 255, 255, 255, 255, 252,   0,   0,   0,   0,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0,   0,   3, 255, 255, 252, 255, 255, 192,  63, 255, 255, 255, 255, 255, 255, 255, 255,   0,   0,   0,   0,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0,   0,   3, 255, 255, 255, 255, 255, 195, 255, 255, 255, 255, 255, 255, 255, 255, 255,   0,   0,   0,   0,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0,   0,  15, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 192,   0,   0,   0,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0,   0,  15, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 192,   0,   0,   0,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0,   0,  63, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 192,   0,   0,   0,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0,   0,  63, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 192,   0,   0,   0,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0,   0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 192,   0,   0,   0,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0,   0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 192,   0,   0,   0,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0,   0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,   0,   0,   0,   0,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0,   0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,   0,   0,   0,   0,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0,   0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 240,   0,   0,   0,   0,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0,   0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 192,   0,   0,   0,   0,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0,   0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,   0,   0,   0,   0,   0,   0,   0,   2, }, { 128,   0,   0,   0,   0,  48,   0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 243, 255, 255, 255, 252,   0,   0,   0,   0,   0,   0,   0,   2, }, { 128,   0,   0,   0,   3, 240, 252,  63, 255, 255, 255, 255, 255, 255, 255, 255, 255,   0, 255, 255, 255, 192,   0,   0,   0,   0,   0,   0,   0,   2, }, { 128,   0,   0,   0,  15, 195, 252,  15, 255, 252,   0, 255, 255, 255, 255, 255, 192,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   2, }, { 128,   0,   0,  60,  15, 192,   0,   0, 252,   0,   0,   3, 255, 255, 255,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   2, }, { 128,   3, 192,   0,   0, 240,   0,   0,   0,  42,  42,  40, 162, 128, 168, 168,  10,  42,  42,  42,  42,   0,   0,   0,   0,   0,   0,   0,   0,   2, }, { 128,   0, 252, 255, 207, 192,   0,   0,   0,  34,  34,  32, 130,   0,  32, 136,   8,   8,  34,  34,   8,   0,  15, 255, 255, 252,   0,   0,   0,   2, }, { 128,   0,  63, 204, 255,   0,   0,   0,   0,  42,  42,  40, 162, 128,  32, 136,  10,   8,  42,  42,   8,   0, 255, 255, 255, 255,   0,   0,   0,   2, }, { 128,   0,  15, 204, 252,   0,   0,   0,   0,  32,  40,  32,  32, 128,  32, 136,   2,   8,  34,  40,   8,   0, 255, 255, 255, 255, 192,   0,   0,   2, }, { 128,   0,   3, 251, 240,   0,   0,   0,   0,  32,  34,  40, 162, 128,  32, 168,  10,   8,  34,  34,   8,   3, 255, 255, 255, 255, 192,   0,   0,   2, }, { 128,   0,   0, 255, 192,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15, 255, 255, 255, 255, 240,   0,   0,   2, }, { 128,   0,   0,  63,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15, 255, 255, 255, 255, 240,   0,   0,   2, }, { 128,   0,   0,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  63, 255, 255, 255, 255, 240,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  63, 255, 255, 255, 255, 255, 255, 252,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 255, 255, 255, 255, 255, 255, 255, 252,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   3, 255, 255, 255, 255, 255, 255, 255, 255,   0,   0,   2, }, { 128,   0,   0,   0,   0,   0, 255, 255, 255, 192,   0,   0,   0,   0,   0,   0,   0,   0,  15, 255, 255, 255, 255, 255, 255, 255, 255, 192,   0,   2, }, { 128,   0,   0,   0,   0,  15, 255, 255, 255, 240,   0,   0,   0,   0,   0,   0,   0,   0,  15, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 194, }, { 128,   0,   0,   0,   0,  15, 255, 255, 255, 252,   0,   0,   0,   0,   0,   0,   0,   0,  15, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 242, }, { 128,   0,   0,   0,   0,  63, 255, 255, 255, 252,   0,   0,   0,   0,   0,   0,   0,   0,  15, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, }, { 128,   0,   0,   0,   0, 255, 255, 255, 255, 255,   0,   0,   0,   0,   0,   0,   0,   0,  15, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, }, { 128,   0,   0,   0,   0, 255, 255, 255, 255, 255,   0,   0,   0,   0,   0,   0,   0,   0,  63, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, }, { 128,   0,   0,   0,   3, 255, 255, 255, 255, 255,   0,   0,   0,   0,   0,   0,   0,   0,  63, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, }, { 128,   0,   3, 255, 255, 255, 255, 255, 255, 255, 192,   0,   0,   0,   0,   0,   0,   0,  63, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, }, { 128,   0,  15, 255, 255, 255, 255, 255, 255, 255, 192,   0,   0,   0,   0,   0,   0,   0,  15, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 242, }, { 128,   0,  63, 255, 255, 255, 255, 255, 255, 255, 240,   0,   0,   0,   0,   0,   0,   0,   3, 255, 255, 255, 255, 255, 240,   0, 255, 255, 255,   2, }, { 128,   0, 255, 255, 255, 255, 255, 255, 255, 255, 252,   0,   0,   0,   0,   0,   0,   3, 192,  15, 255,   3, 255, 255, 192,   0,   0, 255, 252,   2, }, { 128,   0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 252,   0,   0,   0,   0,   0,   0,   0,   0,   0,  63, 255,   0,   0,   0,   0,   0,   2, }, { 128,   0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,   0,   0,   0,   0,   0, 207,   0,   0,   0,   3, 252,   0,   0,   0,   0,   0,   2, }, { 128,   0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 192,   0,   0,   0,   0, 192,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   2, }, { 128,   0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 192,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   2, }, { 149,  87, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 213,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  86, }, { 149,  87, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 213,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  86, }, { 149,  87, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 213,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  86, }, { 149,  85, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  86, }, { 149,  85, 127, 255, 255, 255, 255, 255,  85,  95, 255, 255, 245,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  86, }, { 149, 125,  85, 255, 245, 127, 255, 253,  85,  85,  95, 255, 213,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  86, }, { 149,  85,  85,  85,  85,  87, 255, 245,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  86, }, { 170, 174, 250, 170, 170, 170, 191, 234, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, }, };

#define IMG_ENDFRAME_WIDTH 120
#define IMG_ENDFRAME_BWIDTH 30
#define IMG_ENDFRAME_HEIGHT 60
//data size=1800 bytes
const unsigned char img_endFrame_data[IMG_ENDFRAME_HEIGHT][IMG_ENDFRAME_BWIDTH] PROGMEM={
{   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, }, {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, }, {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, }, {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, }, {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, }, {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, }, {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, }, {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, }, {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, }, {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, }, {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, }, {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, }, {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, }, {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, }, {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,   3, 192,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, }, {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   3, 243, 255,  63,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, }, {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 255,  51, 252,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, }, {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,  63, 255, 240,  64,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, }, {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,  15, 255, 192,  64,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, }, {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,  67, 255,   4,  64,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, }, {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,  68, 252,   4,  64,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, }, {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,  68,  48,  68,  64,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, }, {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,  64,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, }, {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, }, {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, }, {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, }, {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, }, {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, }, {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, }, {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, }, {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, }, {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, }, {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, }, {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, }, {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, }, {   0,   0,   0,   0,   0,   0,   0,   0,  15, 255, 255,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, }, {   0,   0,   0,   0,   0,   0,   0,   0,  15, 255, 255, 192,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, }, {   0,   0,   0,   0,   0,   0,   0,   0,  63, 255, 255, 192,   0,  63, 192,   0,   0,   0,   0,  63, 255, 255, 240,   0,   0,   0,   0,   0,   3, 255, }, {   0,   0,   0,   0,   0,   0,   0,   0, 255, 255, 255, 240,   0, 255, 252,   0,   0,   0,   3, 255, 255, 255, 252,   0,   0,   0,   0,   0,  15, 255, }, {   0,   0,   0,   0,   0,   0,   0,   3, 255, 255, 255, 240,  15, 255, 252,   0,   0,   0,   3, 255, 255, 255, 255,   0,   0,   0,   0,   0,  63, 255, }, {   0, 255, 192,   0,   3, 252,   0,   3, 255, 255, 255, 252,  63, 255, 255, 192,   0,   0,  15, 255, 255, 255, 255,   0,   0,   0,   0,   0,  63, 255, }, {   3, 255, 255,   0,  63, 252,   0,  15, 255, 255, 255, 252, 255, 255, 255, 192,   0,   0,  63, 255, 255, 255, 255, 192,   0,   0,   0,   0, 255, 255, }, {   3, 255, 255, 192, 255, 255,   0,  63, 255, 255, 255, 255, 255, 255, 255, 240,   0,   0,  63, 255, 255, 255, 255, 192,   0,   0,   0,   3, 255, 255, }, {  15, 255, 255, 243, 255, 255,   0, 255, 255, 255, 255, 255, 255, 255, 255, 252,   0,   0, 255, 255, 255, 255, 255, 192,   0,   0,   0,  15, 255, 255, }, {  15, 255, 255, 255, 255, 255,  15, 255, 255, 255, 255, 255, 255, 255, 255, 252, 255, 255, 255, 255, 255, 255, 255, 240,  15, 240,   0,  15, 255, 255, }, {  63, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 240, 255, 240,   0,  63, 255, 255, }, {  63, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 252,   0, 255, 255, 255, }, { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 252,   3, 255, 255, 255, }, { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,  63, 255, 255, 255, }, { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, }, { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, }, { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, }, { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, }, { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, }, { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, }, { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 252,  63, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, }, { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 207, 255, 255, 255, 240,  15, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, }, { 255, 255, 255, 255, 255, 255, 255, 255, 255, 252,   3, 255, 255, 255,  15,   0,  63, 252,  15, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, }, {  63, 255, 240,   3, 255, 255, 255, 255, 255,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, }, {   3, 240,   0,   0,  15, 255, 255, 252,   0,   0,   0,   0,   0,   0,   3,  60,   0,   0,   0,  15, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, }, };

/* define constants for printing to screen */
static const char str0[] PROGMEM="0"; 
static const char str1[] PROGMEM="1"; 
static const char str2[] PROGMEM="2"; 
static const char str3[] PROGMEM="3"; 
static const char str4[] PROGMEM="4"; 
static const char str5[] PROGMEM="5"; 
static const char str6[] PROGMEM="6"; 
static const char str7[] PROGMEM="7"; 
static const char str8[] PROGMEM="8"; 
static const char str9[] PROGMEM="9"; 
static const char str10[] PROGMEM = "Press Button to Start";
static const char str11[] PROGMEM = "Game Over";
static const char str12[] PROGMEM = "Score: ";
static const char str13[] PROGMEM = "Press Button to Play again";
static const char str14[] PROGMEM = "NEW HIGH SCORE!";
static const char str15[] PROGMEM = "HIGH SCORE:";
static const char str16[] PROGMEM = " |* DigiBird *| ";
static const char str17[] PROGMEM = " !!! ";
static const char str18[] PROGMEM = " Fly! ";
static const char str19[] PROGMEM = " +1 ";
static const char str20[] PROGMEM = " -1 ";

/* ----------------------------------------------------------------- DECLARE VARIABLES -----------------------------------------------------------------*/
/* Line & Other Variables */
int lineXPointer[5];
int lineXLastPointer[5];
int lineYUpper[5];
int lineYLower[5];
boolean lineActive[5];
boolean fs_uFI[5];
int score = 0;
int state = 0;
boolean fs_sU[5];
boolean fs_mNL[10];
int topOfPlayScreen = 1;
int bottomOfPlayScreen = 59;
int numActiveLines = 1;
boolean screenADone;
boolean screenBDone;
int lastState;
int holeWidth = 20;
boolean unlatch;
int scoreDigitOnes;
int scoreDigitTens;
int scoreDigitHundreds;
int highScore = 0;
boolean beepActive = false;
int flightAltitudeData[21];
int lastFlwrIndx = 0;
int lastScore = 0;
int collisionDelay = 0;

/* color variables */
int yellow = 3;
int green = 2;
int red = 1;
int black = 0;
int birdColor = yellow;
int backGroundColor = black;
int lineColor = green;
int boarderColor = red;
static unsigned pixelCount;


/* sprite variables*/
int spriteY = 30;
int yPos_SpritePrev = 60;
int xPos_Sprite = 60;
int spriteYflap;
int spriteDirection = 1;
int buttonPin = A0;
boolean buttonState,lastButtonState;

/* game speed variables */
int updateIntervalX = 120;
int updateIntervalY = 135;
int currentUpdateCounterX = 0;
int currentUpdateCounterY = 0;
int animationCounter = 0;

void setup() {
  vga.begin();
  vga.clear(backGroundColor);
  lineXPointer[0] = 118;
  lineYUpper[0] = 20;
  lineYLower[0] = 40;
  lineActive[0] = true;
  fs_mNL[1] = true;
  fs_mNL[2] = true;
  fs_mNL[3] = true;
  fs_mNL[4] = true;
  fs_mNL[5] = true;
  fs_mNL[6] = true;
  fs_mNL[7] = true;
  fs_mNL[8] = true;
  fs_mNL[9] = true;
  fs_uFI[0]=true;
  fs_uFI[1]=true;
  fs_uFI[2]=true;
  fs_uFI[3]=true;
  lineXLastPointer[0] = 118;
  lineXLastPointer[1] = 118;
  lineXLastPointer[2] = 118;
  lineXLastPointer[3] = 118;
  for(int i = 0 ; i<20 ; i++)flightAltitudeData[i] = 30;
}

/* ----------------------------------------------------------------- MAIN LOOP -----------------------------------------------------------------*/
void loop() {
  readInput();
  /* ------------------------- START MENU ------------------------- */
  if (state == 0){       
    printStartScreen();         
    if (buttonState == HIGH) {       // start the game if button is pressed
        //vga.clear(backGroundColor);
        state = 1;
    }
  }
  /* ------------------------- GAME ACTIVE ------------------------- */
  if (state == 1){ 
    if (lastState != state){
        printStartPattern();
        printBoarder();
        vga.printPROGMEM((byte*)fnt_nanofont_data, FNT_NANOFONT_SYMBOLS_COUNT, FNT_NANOFONT_HEIGHT, 3, 1, str18, 85, 10, yellow);
        lastState = state;
    }       
    checkForPointerUpdate();
    scoreUpdate();
    makeNewLine();
    drawBird();
    checkForCollisions();
  }
  /* -------------------------- GAME OVER ------------------------- */
  if (state == 2){
    if (lastState != state){
        if(beepActive) beep(0);               // turns off buzzer
        printEndScreen();
        lastState = state;
        vga.delay(500);
    }
    if (buttonState == LOW) unlatch = true;   // make sure button is released for accepting input to reset the game
    if (buttonState == HIGH && unlatch) {
        //resetVariables();
        state = 3;
    }
  }

  if (state == 3){
    pixelCount++;
    vga.putpixel(rand()%VGAX_WIDTH, rand()%VGAX_HEIGHT, pixelCount%3+1);
    if (pixelCount > 2500){
      state = 1;
      resetVariables();
      vga.clear(0);
    }
  }
  
}


/* ----------------------------------------------------------------- SPRITE FUNCTIONS -----------------------------------------------------------------*/
// draws the main bird with the flappy action
void drawBird() {
  if (spriteDirection == -1)spriteYflap = spriteY + 1; // detects if moving up or down and applies flap action accordingly
  else spriteYflap = spriteY;
  if (yPos_SpritePrev != spriteY) {
    vgaU.draw_line(xPos_Sprite, yPos_SpritePrev, xPos_Sprite, yPos_SpritePrev + 3, backGroundColor);  // print old bird in backround color to delete
    vgaU.draw_line(xPos_Sprite + 1, yPos_SpritePrev + 1, xPos_Sprite + 1, yPos_SpritePrev + 1, backGroundColor);
    vgaU.draw_line(xPos_Sprite, spriteYflap, xPos_Sprite, spriteY + 3, birdColor);                    // print new bird
    vgaU.draw_line(xPos_Sprite + 1, spriteY + 1, xPos_Sprite + 1, spriteY + 1, birdColor);
    yPos_SpritePrev = spriteY;
  }
}
// stores flight data of main bird for follower birds to follow
void updateFlightPath(){
  for(int i = 20 ; i>=1 ; i--){
    flightAltitudeData[i] = flightAltitudeData[i-1];
  }
  flightAltitudeData[0] = spriteY;
  drawFollowers();
}
// draws follower birds with flappy action
void drawFollowers(){
    for(int i = lastFlwrIndx ; i>0 ; i=i-5){      // the "last follower" is the one at the end of the chain - the one to be removed if a collision occurs
      if (flightAltitudeData[i] >= flightAltitudeData[i-1]) spriteYflap = flightAltitudeData[i-1] + 1;  // detects if moving up or down and applies flap action accordingly
      else spriteYflap = flightAltitudeData[i-1];
      vgaU.draw_line(xPos_Sprite-i, flightAltitudeData[i], xPos_Sprite-i, flightAltitudeData[i] + 3, backGroundColor);  // print old bird in backround color to delete
      vgaU.draw_line(xPos_Sprite + 1-i, flightAltitudeData[i]+1, xPos_Sprite + 1-i, flightAltitudeData[i] + 1, backGroundColor);
      vgaU.draw_line(xPos_Sprite-i, spriteYflap, xPos_Sprite-i, flightAltitudeData[i-1] + 3, birdColor);                // print new bird
      vgaU.draw_line(xPos_Sprite + 1-i, flightAltitudeData[i-1] + 1, xPos_Sprite + 1-i, flightAltitudeData[i-1] + 1, birdColor);
    } 
}
void checkForCollisions() {
  //if(beepActive) beep(0);       buzzer removed - if re-activated it beeps when flying through the wall
  if (collisionDelay == 0){
    for(int i = 0 ; i<5 ; i++){
      if (xPos_Sprite == lineXPointer[i]){                             // cheack if bird and line X are lined up
        //beep(1);                  buzzer removed
        if (lineYLower[i] < spriteY + 3 || lineYUpper[i] > spriteY){   // check if bird makes it through the hole
          if (lastFlwrIndx <= 0){
            state = 2;               // end game
          }
          else {
            lastFlwrIndx -=5;        // take away 1 life
            collisionDelay = 500;    //dont take away any more lives while flying through line
            printLifeGainLoss(0);    // print "-1"
            break;
          }
        }
      } 
    }
  }else collisionDelay--;
}
/* ----------------------------------------------------------------- LINE FUNCTIONS -----------------------------------------------------------------*/
void printLines(){
  for(int i = 0 ; i<5 ; i++){
    if(lineActive[i] == true){
      if(lineXPointer[i]<59 || lineXPointer[i]>61)
      vgaU.draw_line(lineXLastPointer[i], topOfPlayScreen, lineXLastPointer[i], bottomOfPlayScreen, backGroundColor);
      else{
      vgaU.draw_line(lineXLastPointer[i], topOfPlayScreen, lineXLastPointer[i], lineYUpper[i], backGroundColor);
      vgaU.draw_line(lineXLastPointer[i], lineYLower[i], lineXLastPointer[i], bottomOfPlayScreen, backGroundColor);
      }
      vgaU.draw_line(lineXPointer[i], topOfPlayScreen, lineXPointer[i], lineYUpper[i], lineColor);
      vgaU.draw_line(lineXPointer[i], lineYLower[i], lineXPointer[i], bottomOfPlayScreen, lineColor);
    }
  }
}
// generate the hole width based on score
int genHoleWidth(){
  addFollowers();
  if (score < 5)return holeWidth = 25;
  else if (score < 11)return holeWidth = 20;
  else if (score < 15)return holeWidth = 17; 
  else if (score < 20){return holeWidth = 15;}
  else if (score < 34){return holeWidth = 22;}
  else if (score < 40){updateIntervalX = 45; updateIntervalY = 85; return holeWidth = 25; }
  else if (score < 50)return holeWidth = 20;
  else if (score < 60){return holeWidth = 17;}
  else if (score < 70){updateIntervalY = 65; return holeWidth = 14;}
  else if (score < 80)return holeWidth = 11;  
  else if (score < 90)return holeWidth = 8;
  else if (score < 100){return holeWidth = 8; updateIntervalX = 15;}
}
// a life(follower) is added when player reaches a multiple of 6 intil player has a max of 4 lives
void addFollowers(){
if (score == 6 && fs_uFI[0]==true) {lastFlwrIndx +=5; fs_uFI[0]=false; printLifeGainLoss(1);}
else if (score == 12 && fs_uFI[1]==true) {lastFlwrIndx +=5; fs_uFI[1]=false; printLifeGainLoss(1);}
else if (score == 18 && fs_uFI[2]==true) {lastFlwrIndx +=5;fs_uFI[2]=false; printLifeGainLoss(1);}
else if (score == 24 && fs_uFI[3]==true) {lastFlwrIndx +=5;fs_uFI[3]=false; printLifeGainLoss(1);}
}
// prints gain or loss of life text - passing a 1 is "+1" while 0 is "-1"
void printLifeGainLoss(boolean change){
  if (change == 1) vga.printPROGMEM((byte*)fnt_nanofont_data, FNT_NANOFONT_SYMBOLS_COUNT, FNT_NANOFONT_HEIGHT, 3, 1, str19, 80, 45, green); // prints "+1"
  else vga.printPROGMEM((byte*)fnt_nanofont_data, FNT_NANOFONT_SYMBOLS_COUNT, FNT_NANOFONT_HEIGHT, 3, 1, str20, 80, 35, red); // prints "-1"
}
// change line speed based on number of lines being printed to compensate for lag
void changeLineSpeed(int change){
  numActiveLines += change;
  if (numActiveLines == 1) updateIntervalX = 120;
  if (numActiveLines == 2) {updateIntervalX = 90; updateIntervalY = 135; lineColor = green;} //change line speed based on number of lines active (more lines printed = slower scan speed)
  if (numActiveLines == 3) {updateIntervalX = 80; updateIntervalY = 100;}
  if (numActiveLines == 4) {updateIntervalX = 50; updateIntervalY = 50; lineColor = red;}
}
// generates a new line && modies the gameplay with effects based on score
void makeNewLine(){
  // generate second line for regular mode
  if (score == 1 && fs_mNL[1]){
    lineActive[1] = true;
    lineXPointer[1] = 118;
    lineYUpper[1] = 36;
    lineYLower[1] = 56;
    changeLineSpeed(1);
    fs_mNL[1] = false;
  }
  // generate 1 more line to increase difficulty
  if (score == 20 && fs_mNL[2] && lineXPointer[1] <= 30){
    lineActive[2] = true;
    lineXPointer[2] = 118;
    lineYUpper[2] = 1 + random(59 - holeWidth);
    lineYLower[2] = lineYUpper[2] + holeWidth - 1;
    changeLineSpeed(1);
    fs_mNL[2] = false;
  }
    // generate 1 more line to increase difficulty
  if (score == 22 && fs_mNL[3] && lineXPointer[0] <= 30){
    lineActive[3] = true;
    lineXPointer[3] = 118;
    lineYUpper[3] = 1 + random(59 - holeWidth);
    lineYLower[3] = lineYUpper[3] + holeWidth - 1;
    changeLineSpeed(1);
    fs_mNL[3] = false;
  }
  //remove line
    if (score == 32 && fs_mNL[4]){
    lineActive[2] = false;
    vgaU.draw_line(lineXLastPointer[2], topOfPlayScreen, lineXLastPointer[2], bottomOfPlayScreen, backGroundColor);
    lineXPointer[2] = 0;
    lineYUpper[2] = 0;
    lineYLower[2] = 0;
    changeLineSpeed(-1);
    fs_mNL[4] = false;
  }
    //remove line
    if (score == 33 && fs_mNL[5] && lineXPointer[0] <= 30){
    lineActive[3] = false;
    vgaU.draw_line(lineXLastPointer[2], topOfPlayScreen, lineXLastPointer[2], bottomOfPlayScreen, backGroundColor);
    lineXPointer[3] = 0;
    lineYUpper[3] = 0;
    lineYLower[3] = 0;
    changeLineSpeed(-1);
    fs_mNL[5] = false;
  }
  //Modify the game behavior based on score to make things interesting
  if (score > 4 && score < 7){
    if (lineXPointer[0]%60 < 60) lineColor = red;
    if (lineXPointer[0]%60 < 40) lineColor = green;
    if (lineXPointer[0]%60 < 20) lineColor = yellow;
  }
  if (score > 9 && score < 15) beep(0);
  if (score > 15 && score < 20 && lineXPointer[0]%30==0){
    vga.putpixel(random(2,119), random(2,58), red);
    vga.putpixel(random(2,119), random(2,58), green);
    vga.putpixel(random(2,119), random(2,58), yellow);
  }
  if (score > 20 && score < 30){
    lineColor = red;
    if (lineXPointer[0]%60 < 40) lineColor = green;
    if (lineXPointer[0]%60 < 20) lineColor = yellow;
  }
  if (score == 33 && fs_mNL[9]){
    vga.printPROGMEM((byte*)fnt_nanofont_data, FNT_NANOFONT_SYMBOLS_COUNT, FNT_NANOFONT_HEIGHT, 3, 1, str17, 70, 10, red);
    vga.printPROGMEM((byte*)fnt_nanofont_data, FNT_NANOFONT_SYMBOLS_COUNT, FNT_NANOFONT_HEIGHT, 3, 1, str17, 70, 50, red);
    fs_mNL[9] = false;
  }
  if (score == 40 && fs_mNL[6]){
    boarderColor = 3;
    lineColor = yellow;
    printBoarder();
    fs_mNL[6] = false;
  }
  if (score > 43 && score < 45 && lineXPointer[0]%20==0){
    vga.putpixel(random(2,119), random(2,58), red);
    vga.putpixel(random(2,119), random(2,58), green);
    vga.putpixel(random(2,119), random(2,58), yellow);
  }
  if (score == 50 && fs_mNL[7]){
    boarderColor = 2;
    lineColor = 2;
    printBoarder();
    fs_mNL[7] = false;
  }
  if (score > 55 && score < 59){
    lineColor = yellow;
    if (lineXPointer[0]%40 < 10) lineColor = black;
  }
  if (score == 60 && fs_mNL[8]){
    boarderColor = 1;
    lineColor = 1;
    printBoarder();
    fs_mNL[8] = false;
  }
   if (score == 67 && lineXPointer[0] == 40){
    printPattern();
  }
}
void reGenLine(int lineNumber){
  lineXPointer[lineNumber] = 118;
  holeWidth = genHoleWidth();
  lineYUpper[lineNumber] = 1 + random(59 - holeWidth);
  lineYLower[lineNumber] = lineYUpper[lineNumber] + holeWidth - 1;
}
void printBoarder(){
  vgaU.draw_line(0, 0, 119, 0, boarderColor);
  vgaU.draw_line(119, 0, 119, 60, boarderColor);
  vgaU.draw_line(119, 59, 0, 59, boarderColor);
  vgaU.draw_line(0, 59, 0, 0, boarderColor);
}
// detect if the program has gone through a set umber of scans ( to move lines left )
void checkForPointerUpdate(){
  // incriment the x variable for line shifting every time the update interval has been reached
  if (currentUpdateCounterX > updateIntervalX){
    updatePointers();
    currentUpdateCounterX = 0;
    updateFlightPath();
    }
  // incriment the y variable for the sprite every time the update interval has been reached
  if ( currentUpdateCounterY > updateIntervalY) {
    spriteY += spriteDirection;
    if (spriteY + 4 >= 60) spriteY = 56;
    if (spriteY <= 1) spriteY = 1;
    currentUpdateCounterY = 0;
  }
  currentUpdateCounterX++;
  currentUpdateCounterY++;
}
// update pointers and regenerate line if reaches far left
void updatePointers(){
  for (int i = 0 ; i < 5 ; i++){
    if(lineActive[i] == true){
      lineXLastPointer[i] = lineXPointer[i];
      lineXPointer[i] -= 1;
      if(lineXPointer[i] == 1){
        reGenLine(i);
      }
      printLines();
    } 
  }
}

/* ----------------------------------------------------------------- SCORE FUNCTIONS -----------------------------------------------------------------*/
void scoreUpdate(){
  for (int i = 0; i < 5 ; i++){
    if (lineActive[i] == true){
      if(lineXPointer[i] == 60 && fs_sU[i]){
        score++;
        if (score%5==0) printActiveScore();
        fs_sU[i] = false;
      }
      if(lineXPointer[i] != 60) fs_sU[i] = true;
    }
  }
}
// prints score every 5 points
void printActiveScore(){
    individualScoreDigits(score);
    printDigit(15,2, scoreDigitOnes); // 0 is the least significant digit location
    printDigit(10,2, scoreDigitTens);
    printDigit(5,2, scoreDigitHundreds);
    lastScore = score;
}
// seperate digits for printing
void individualScoreDigits(int number){
  scoreDigitOnes = number%10;
  scoreDigitTens = (number%100)/10;
  scoreDigitHundreds = number/100;
}
void printHighScore(){
  vga.printPROGMEM((byte*)fnt_nanofont_data, FNT_NANOFONT_SYMBOLS_COUNT, FNT_NANOFONT_HEIGHT, 3, 1, str15, 47, 0, 1); //print "High Score: "
  int highScoreMem = highScore;
  individualScoreDigits(highScoreMem);
  printDigit(112,0, scoreDigitOnes); 
  printDigit(107,0, scoreDigitTens);
  printDigit(102,0, scoreDigitHundreds);
}
// prints digits by refering to string constants previously defined
void printDigit(int xdigitLoc,int ydigitLoc, int digitValue){
  if (digitValue == 0) vga.printPROGMEM((byte*)fnt_nanofont_data, FNT_NANOFONT_SYMBOLS_COUNT, FNT_NANOFONT_HEIGHT, 3, 1, str0, xdigitLoc, ydigitLoc, red);
  if (digitValue == 1) vga.printPROGMEM((byte*)fnt_nanofont_data, FNT_NANOFONT_SYMBOLS_COUNT, FNT_NANOFONT_HEIGHT, 3, 1, str1, xdigitLoc, ydigitLoc, red);
  if (digitValue == 2) vga.printPROGMEM((byte*)fnt_nanofont_data, FNT_NANOFONT_SYMBOLS_COUNT, FNT_NANOFONT_HEIGHT, 3, 1, str2, xdigitLoc, ydigitLoc, red);
  if (digitValue == 3) vga.printPROGMEM((byte*)fnt_nanofont_data, FNT_NANOFONT_SYMBOLS_COUNT, FNT_NANOFONT_HEIGHT, 3, 1, str3, xdigitLoc, ydigitLoc, red);
  if (digitValue == 4) vga.printPROGMEM((byte*)fnt_nanofont_data, FNT_NANOFONT_SYMBOLS_COUNT, FNT_NANOFONT_HEIGHT, 3, 1, str4, xdigitLoc, ydigitLoc, red);
  if (digitValue == 5) vga.printPROGMEM((byte*)fnt_nanofont_data, FNT_NANOFONT_SYMBOLS_COUNT, FNT_NANOFONT_HEIGHT, 3, 1, str5, xdigitLoc, ydigitLoc, red);
  if (digitValue == 6) vga.printPROGMEM((byte*)fnt_nanofont_data, FNT_NANOFONT_SYMBOLS_COUNT, FNT_NANOFONT_HEIGHT, 3, 1, str6, xdigitLoc, ydigitLoc, red);
  if (digitValue == 7) vga.printPROGMEM((byte*)fnt_nanofont_data, FNT_NANOFONT_SYMBOLS_COUNT, FNT_NANOFONT_HEIGHT, 3, 1, str7, xdigitLoc, ydigitLoc, red);
  if (digitValue == 8) vga.printPROGMEM((byte*)fnt_nanofont_data, FNT_NANOFONT_SYMBOLS_COUNT, FNT_NANOFONT_HEIGHT, 3, 1, str8, xdigitLoc, ydigitLoc, red);
  if (digitValue == 9) vga.printPROGMEM((byte*)fnt_nanofont_data, FNT_NANOFONT_SYMBOLS_COUNT, FNT_NANOFONT_HEIGHT, 3, 1, str9, xdigitLoc, ydigitLoc, red);
}

/* ----------------------------------------------------------------- OTHER FUNCTIONS -----------------------------------------------------------------*/
// read button
void readInput() {
  if (analogRead(buttonPin) > 500) {
    buttonState = HIGH;
  } else buttonState = LOW;
  if (buttonState != lastButtonState) {
    spriteDirection *= -1;
    lastButtonState = buttonState;
  }
}
void beep(boolean buzzerCommand){
  if (buzzerCommand == 0){
    analogWrite(A1, 0);
    beepActive = false;
  }
  if(buzzerCommand == 1){
  analogWrite(A1,200);
  beepActive = true;
  }
}
void printStartScreen(){
  // animate start screen
    if (animationCounter < 2500 && screenADone == false){
        vga.copy((byte*)img_StartScrnA_data);
        vga.printPROGMEM((byte*)fnt_nanofont_data, FNT_NANOFONT_SYMBOLS_COUNT, FNT_NANOFONT_HEIGHT, 3, 1, str16, 28, 5, red); //title
        printBoarder();
        screenADone = true;
        screenBDone = false;
    }else if (animationCounter > 2500 && screenBDone == false){
        vga.copy((byte*)img_StartScrnB_data);
        vga.printPROGMEM((byte*)fnt_nanofont_data, FNT_NANOFONT_SYMBOLS_COUNT, FNT_NANOFONT_HEIGHT, 3, 1, str16, 28, 5, red); //title
        printBoarder();
        screenBDone = true;
        screenADone = false;
    }
    animationCounter++;
    if (animationCounter>5000) animationCounter = 0;
}
void printEndScreen(){
  //vga.clear(backGroundColor);
  vga.copy((byte*)img_endFrame_data);
  individualScoreDigits(score);
  vga.printPROGMEM((byte*)fnt_nanofont_data, FNT_NANOFONT_SYMBOLS_COUNT, FNT_NANOFONT_HEIGHT, 3, 1, str13, 6, 50, red); //press button to play again
  vga.printPROGMEM((byte*)fnt_nanofont_data, FNT_NANOFONT_SYMBOLS_COUNT, FNT_NANOFONT_HEIGHT, 3, 1, str12, 0, 0, red); //print "score:"
  printDigit(36,0, scoreDigitOnes); // 0 is the least significant digit location
  printDigit(31,0, scoreDigitTens);
  printDigit(26,0, scoreDigitHundreds);
  EEPROM.get(0, highScore); //load previous high score from EEPROM memory
  if(highScore < score ) {
    highScore = score;
    EEPROM.put(0, highScore);
    vga.printPROGMEM((byte*)fnt_nanofont_data, FNT_NANOFONT_SYMBOLS_COUNT, FNT_NANOFONT_HEIGHT, 3, 1, str14, 25, 30, red); //print "New high score!"
    }
  printHighScore();
}
void printPattern(){
    for (int y=0; y!=VGAX_HEIGHT; y++) {
    for (int x=0; x!=VGAX_BWIDTH-1; x++) {
      if (x==0)
        vga.putpixel(x, y, 3);
      else if (y==0 || y==VGAX_HEIGHT-1)
        vga.putpixel4(x, y, 0xff);
      else
        vga.putpixel4(x, y, y%2 ? 27 : 228);
    }
  }
}
void printStartPattern(){
  int cnt=0;
  while(cnt<120){
    vgaU.draw_line(cnt, 0, cnt, 21, black);
    cnt++;
    delayMicroseconds(300);
  }
  cnt=0;
  while(cnt<120){
    vgaU.draw_line(120-cnt, 20, 120-cnt, 40, black);
    cnt++;
    delayMicroseconds(300);
  }
  cnt=0;
  while(cnt<120){
    vgaU.draw_line(cnt, 40, cnt, 60, black);
    cnt++;
    delayMicroseconds(300);
  }
}
void resetVariables(){
  vga.clear(backGroundColor);
  state = 1;
  lineXPointer[0] = 118;
  lineXLastPointer[0] = 1;
  lineXPointer[1] = 118;
  lineXLastPointer[1] = 1;
  spriteY = 30;
  spriteDirection = 1;
  score = 0;
  unlatch = false;
  holeWidth = 20;
  fs_mNL[1] = true;
  fs_mNL[2] = true;
  fs_mNL[3] = true;
  fs_mNL[4] = true;
  fs_mNL[5] = true;
  fs_mNL[6] = true;
  fs_mNL[7] = true;
  fs_mNL[8] = true;
  fs_mNL[9] = true;
  lineActive[1] = false;
  lineActive[2] = false;
  lineActive[3] = false;
  lineActive[4] = false;
  lineActive[5] = false;
  fs_uFI[0]=true;
  fs_uFI[1]=true;
  fs_uFI[2]=true;
  fs_uFI[3]=true;
  lineYUpper[0] = 20;
  lineYLower[0] = 40;
  lineYUpper[1] = 20;
  lineYLower[1] = 40;
  lineActive[1] = false;
  lineXPointer[2] = 0;
  lineYUpper[2] = 0;
  lineYLower[2] = 0;
  lineXPointer[3] = 0;
  lineYUpper[3] = 0;
  lineYLower[3] = 0;
  changeLineSpeed(1);
  updateIntervalX = 120;
  updateIntervalY = 135;
  numActiveLines = 1;
  lineColor = 2;
  lastFlwrIndx = 0;
  pixelCount = 0;
  collisionDelay = 0;
}
